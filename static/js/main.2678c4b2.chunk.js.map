{"version":3,"sources":["Ad/Ad.tsx","Sign/SignContent.ts","Sign/Sign.tsx","Footer/Footer.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Ad","className","GetSignContent","date","position","suggestion","information","isGoldenHour","goldenHours","times","SunCalc","getTimes","coords","latitude","longitude","morningGoldenHourStart","sunriseEnd","morningGoldenHourEnd","goldenHourEnd","eveningGoldenHourStart","goldenHour","eveningGoldenHourEnd","sunsetStart","GetGoldenHours","getTime","YesGoldenHourResponse","goldenHourStart","previousEveningGoldenHourEnd","Date","toLocaleTimeString","timer","GetTimer","goldenHourPercent","GetDatePercent","NoGoldenHourPreviousDayResponse","NoGoldenHourResponse","nextMorningGoldenHourStart","GetClockTime","NoGoldenHourNextDayResponse","replace","start","end","Sign","useState","setDate","setPosition","content","setContent","useEffect","interval","setInterval","setAsyncPosition","clearInterval","navigator","geolocation","getCurrentPosition","err","console","log","noGoldenHourProgressBarStyles","buildStyles","pathColor","trailColor","backgroundColor","yesGoldenHourProgressBarStyles","value","background","backgroundPadding","strokeWidth","styles","Footer","href","target","rel","icon","githubFilled","linkedinFilled","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.2678c4b2.chunk.js","sourcesContent":["import React, {useEffect} from 'react'\nimport './Ad.css'\n\ndeclare global {\n  interface Window {\n      adsbygoogle: any;\n  }\n}\n\nfunction Ad() {\n  // useEffect(() => {\n  //   if (window) (window.adsbygoogle = window.adsbygoogle || []).push({});\n  // }, []);\n\n  return (\n    <div className=\"Ad\">\n      {/* <ins className=\"adsbygoogle\"\n        style={{ display: \"block\" }}\n        data-ad-layout=\"in-article\"\n        data-ad-format=\"fluid\"\n        data-ad-client=\"ca-pub-0645475852185063\"\n        data-ad-slot=\"5520937769\" /> */}\n    </div>\n  )\n}\n\nexport default Ad\n","import SunCalc from 'suncalc'\n\ninterface SignContent {\n    suggestion: string;\n    information: string;\n    isGoldenHour: boolean;\n    timer?: string;\n    goldenHourPercent?: number;\n}\n\nexport function GetSignContent(date: Date, position?: Position): SignContent {\n    if (!position) return NoGoldenHourNoPositionResponse()\n\n    const goldenHours = GetGoldenHours(date, position)\n\n    if (date.getTime() >= goldenHours.morningGoldenHourStart.getTime() && \n        date.getTime() < goldenHours.morningGoldenHourEnd.getTime()) {\n\n        return YesGoldenHourResponse(\n            date, \n            goldenHours.morningGoldenHourStart,\n            goldenHours.morningGoldenHourEnd,\n        )\n    }\n\n    if (date.getTime() >= goldenHours.eveningGoldenHourStart.getTime() && \n        date.getTime() < goldenHours.eveningGoldenHourEnd.getTime()) {\n\n        return YesGoldenHourResponse(\n            date, \n            goldenHours.eveningGoldenHourStart,\n            goldenHours.eveningGoldenHourEnd,\n        )\n    }\n\n    if (date.getTime() < goldenHours.morningGoldenHourStart.getTime()) {\n        return NoGoldenHourPreviousDayResponse(\n            date, \n            goldenHours.morningGoldenHourStart,\n            goldenHours.eveningGoldenHourEnd,\n        )\n    }\n\n    if (date.getTime() < goldenHours.eveningGoldenHourStart.getTime()) {\n        return NoGoldenHourResponse(\n            date, \n            goldenHours.eveningGoldenHourStart,\n            goldenHours.morningGoldenHourEnd,\n        )\n    }\n\n    if (date.getTime() >= goldenHours.eveningGoldenHourEnd.getTime()) {\n        return NoGoldenHourNextDayResponse(\n            date, \n            goldenHours.morningGoldenHourStart,\n            goldenHours.eveningGoldenHourEnd,\n        )\n    }\n\n    return NoGoldenHourSomethingWrongResponse()\n}\n\ninterface GoldenHourTimes {\n    morningGoldenHourStart: Date;\n    morningGoldenHourEnd: Date;\n    eveningGoldenHourStart: Date;\n    eveningGoldenHourEnd: Date;\n}\n\nfunction GetGoldenHours(date: Date, position: Position): GoldenHourTimes {\n    const times = SunCalc.getTimes(date, position.coords.latitude, position.coords.longitude)\n\n    return {\n        morningGoldenHourStart: times.sunriseEnd,\n        morningGoldenHourEnd: times.goldenHourEnd,\n        eveningGoldenHourStart: times.goldenHour,\n        eveningGoldenHourEnd: times.sunsetStart,\n    }\n}\n\nfunction NoGoldenHourNoPositionResponse(): SignContent {\n    return {\n        suggestion: 'Enable location!',\n        information: 'I need to know it to get to know your golden hour!',\n        isGoldenHour: false\n    }\n}\n\nfunction YesGoldenHourResponse(date: Date, goldenHourStart: Date, goldenHourEnd: Date): SignContent {\n    return {\n        suggestion: 'Right now!',\n        information: 'Golden hour ends at ' + goldenHourEnd.toLocaleTimeString('en-US'),\n        timer: GetTimer(date, goldenHourEnd),\n        isGoldenHour: true,\n        goldenHourPercent: GetDatePercent(date, goldenHourStart, goldenHourEnd)\n    }\n}\n\nfunction GetClockTime(date: Date): string {\n    const secondsRegex = /:[0-9]+\\s/\n    return date.toLocaleTimeString('en-US').replace(secondsRegex, ' ')\n}\n\nfunction GetTimer(start: Date, end: Date): string {\n    return new Date(end.getTime() - start.getTime() - (1000 * 60 * 60 * 1)).toLocaleTimeString('en-GB')\n}\n\nfunction GetDatePercent(date: Date, goldenHourStart: Date, goldenHourEnd: Date): number {\n    return 100 * (date.getTime() - goldenHourStart.getTime()) / (goldenHourEnd.getTime() - goldenHourStart.getTime())\n}\n\nfunction NoGoldenHourPreviousDayResponse(date: Date, goldenHourStart: Date, goldenHourEnd: Date): SignContent {\n    const previousEveningGoldenHourEnd = new Date(goldenHourEnd.getTime() - (1000 * 60 * 60 * 24))\n    return {\n        suggestion: 'Wait for it...',\n        information: 'Golden hour starts at ' + goldenHourStart.toLocaleTimeString('en-US'),\n        timer: GetTimer(date, goldenHourStart),\n        isGoldenHour: false,\n        goldenHourPercent: GetDatePercent(date, previousEveningGoldenHourEnd, goldenHourStart)\n    }\n}\n\nfunction NoGoldenHourResponse(date: Date, goldenHourStart: Date, goldenHourEnd: Date): SignContent {\n    return {\n        suggestion: 'Wait for it...',\n        information: 'Golden hour starts at ' + goldenHourStart.toLocaleTimeString('en-US'),\n        timer: GetTimer(date, goldenHourStart),\n        isGoldenHour: false,\n        goldenHourPercent: GetDatePercent(date, goldenHourEnd, goldenHourStart)\n    }\n}\n\nfunction NoGoldenHourNextDayResponse(date: Date, goldenHourStart: Date, goldenHourEnd: Date): SignContent {\n    const nextMorningGoldenHourStart = new Date(goldenHourStart.getTime() + (1000 * 60 * 60 * 24))\n    return {\n        suggestion: 'Wait for it...',\n        information: 'Golden hour starts at ' + GetClockTime(nextMorningGoldenHourStart),\n        timer: GetTimer(date, nextMorningGoldenHourStart),\n        isGoldenHour: false,\n        goldenHourPercent: GetDatePercent(date, goldenHourEnd, nextMorningGoldenHourStart)\n    }\n}\n\nfunction NoGoldenHourSomethingWrongResponse(): SignContent {\n    return {\n        suggestion: 'Something went wrong :(',\n        information: 'Try to refresh the app!',\n        isGoldenHour: false\n    }\n}","import React, {useState, useEffect} from 'react'\nimport './Sign.css'\nimport { GetSignContent } from './SignContent'\nimport 'react-circular-progressbar/dist/styles.css';\nimport { CircularProgressbarWithChildren, buildStyles } from 'react-circular-progressbar';\n\nfunction Sign() {\n  const [date, setDate] = useState(new Date())\n  const [position, setPosition] = useState()\n  const [content, setContent] = useState(GetSignContent(date, position))\n\n  useEffect(() => {\n    const interval = setInterval(() => {\n      setDate(new Date())\n      setAsyncPosition()\n      setContent(GetSignContent(date, position))\n    }, 1000)\n    return () => clearInterval(interval)\n  })\n\n  const setAsyncPosition = (() => { navigator.geolocation.getCurrentPosition(\n    position => setPosition(position),\n    err => console.log(\"Failed to get current position\", err)\n  )})\n\n  const noGoldenHourProgressBarStyles = buildStyles({\n    pathColor: '#ffc93c',\n    trailColor: '#253b4a',\n    backgroundColor: \"#253b4a\",\n  })\n\n  const yesGoldenHourProgressBarStyles = buildStyles({\n    pathColor: '#253b4a',\n    trailColor: '#ffc93c',\n    backgroundColor: \"#ffc93c\",\n  })\n\n  return (\n    <div className=\"Sign\">\n      <header className=\"Sign-header\">\n        <CircularProgressbarWithChildren \n          value={content.goldenHourPercent || 0}\n          background \n          backgroundPadding={2} \n          strokeWidth={1} \n          styles={content.isGoldenHour ? yesGoldenHourProgressBarStyles : noGoldenHourProgressBarStyles}>\n          <div className={content.isGoldenHour ? \"Sign-text-yes-golden-hour\" : \"Sign-text-no-golden-hour\"}>\n            <p>{content.suggestion}</p>\n            <p>{content.information}</p>\n            <p>{content.timer}</p>\n          </div>\n        </CircularProgressbarWithChildren>\n      </header>\n    </div>\n  )\n}\n\nexport default Sign\n","import React from 'react'\nimport './Footer.css'\nimport { Icon } from '@iconify/react';\nimport linkedinFilled from '@iconify/icons-ant-design/linkedin-filled';\nimport githubFilled from '@iconify/icons-ant-design/github-filled';\n\n\n\nfunction Footer() {\n  return (\n    <div className=\"Footer\">\n      <header className=\"Footer-header\">\n        <p>\n          <a href=\"https://github.com/franpog859\" target=\"_blank\" rel=\"noopener noreferrer\">\n            <Icon icon={githubFilled} className=\"Icon\" />\n          </a>\n          <a href=\"https://www.linkedin.com/in/franciszekpogodzinski/\" target=\"_blank\" rel=\"noopener noreferrer\">\n            <Icon icon={linkedinFilled} className=\"Icon\" />\n          </a>\n        </p>\n      </header>\n    </div>\n  )\n}\n\nexport default Footer\n","import React from 'react'\nimport './App.css'\nimport Ad from './Ad/Ad'\nimport Sign from './Sign/Sign'\nimport Footer from './Footer/Footer'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Ad />\n      <Sign />\n      <Footer />\n    </div>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}